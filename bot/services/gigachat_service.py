# services/gigachat_service.py
import gigachat
from gigachat.models import Chat, Messages, MessagesRole
import json
import re
from config import GIGACHAT_API_KEY

class GigaChatService:
    def __init__(self):
        self.api_key = GIGACHAT_API_KEY
        self.client = None
        self._connect()
        
    def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat"""
        try:
            self.client = gigachat.GigaChat(
                credentials=self.api_key,
                verify_ssl_certs=False
            )
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            self.client.get_models()
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat: {e}")
            return False
    
    def translate_text(self, text: str, direction: str = "to_formal") -> tuple[str, str]:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é GigaChat"""
        if not self.client:
            if not self._connect():
                return text, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if direction == "to_formal":
                system_prompt = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –∏ —Å–ª–µ–Ω–≥—É. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å
2. –û–±—ä—è—Å–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
3. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤:
{
  "translation": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
  "explanation": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤"
}

–ü—Ä–∏–º–µ—Ä –¥–ª—è "–≠—Ç–æ –∫—Ä–∏–Ω–∂ –±—Ä–æ":
{
  "translation": "–≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–µ–ª–æ–≤–∫–æ—Å—Ç—å, –¥—Ä—É–≥ / –≠—Ç–æ —Å—Ç—ã–¥–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç, –ø—Ä–∏—è—Ç–µ–ª—å",
  "explanation": "‚Ä¢ '–∫—Ä–∏–Ω–∂' - —á—É–≤—Å—Ç–≤–æ –Ω–µ–ª–æ–≤–∫–æ—Å—Ç–∏, —Å—Ç—ã–¥–∞ –∑–∞ —á—å–∏-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–π\\n‚Ä¢ '–±—Ä–æ' - –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –¥—Ä—É–≥—É, –ø—Ä–∏—è—Ç–µ–ª—é"
}"""
            else:
                system_prompt = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å
2. –û–±—ä—è—Å–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª–µ–Ω–≥–æ–≤—ã–µ –∞–Ω–∞–ª–æ–≥–∏
3. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤:
{
  "translation": "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
  "explanation": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"
}

–ü—Ä–∏–º–µ—Ä –¥–ª—è "–î–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç —á—É–≤—Å—Ç–≤–æ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç–∞":
{
  "translation": "–≠—Ç–æ –Ω–µ–ª–æ–≤–∫–æ / –≠—Ç–æ —Å—Ç—Ä–µ–º–Ω–æ",
  "explanation": "‚Ä¢ '–≤—ã–∑—ã–≤–∞–µ—Ç —á—É–≤—Å—Ç–≤–æ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç–∞' - —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–ª–æ–≤–∫–æ—Å—Ç—å, —Å—Ç—ã–¥\\n‚Ä¢ –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–ª–µ–Ω–≥: '–∫—Ä–∏–Ω–∂', '—Å—Ç—Ä–µ–º–Ω–æ', '–Ω–µ–ª–æ–≤–∫–∞'"
}"""
            
            messages = [
                Messages(role=MessagesRole.SYSTEM, content=system_prompt),
                Messages(role=MessagesRole.USER, content=text)
            ]
            
            response = self.client.chat(Chat(messages=messages))
            content = response.choices[0].message.content
            
            print(f"üîç –û—Ç–≤–µ—Ç –æ—Ç GigaChat: {content}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            try:
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º JSON - –∑–∞–º–µ–Ω—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                fixed_json = content
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
                fixed_json = re.sub(r'(?<!\\)\\(?!["\\/bfnrtu])', r'\\\\', fixed_json)
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫
                def escape_quotes(match):
                    text = match.group(1)
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã
                    text = re.sub(r'(?<!\\)"', r'\\"', text)
                    return f'"{text}"'
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ JSON
                fixed_json = re.sub(r'"([^"]*)"', escape_quotes, fixed_json)
                
                # –ü–∞—Ä—Å–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JSON
                parsed = json.loads(fixed_json)
                translation = parsed.get("translation", text)
                explanation = parsed.get("explanation", "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
                
                # –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                explanation = explanation.replace('\\n', '\n')
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                try:
                    translation_match = re.search(r'"translation"\s*:\s*"([^"]*)"', content, re.DOTALL)
                    explanation_match = re.search(r'"explanation"\s*:\s*"([^"]*)"', content, re.DOTALL)
                    
                    if translation_match and explanation_match:
                        translation = translation_match.group(1)
                        explanation = explanation_match.group(1)
                        # –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                        explanation = explanation.replace('\\n', '\n')
                    else:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö, –∏—â–µ–º –±–µ–∑ –Ω–∏—Ö
                        translation_match = re.search(r'"translation"\s*:\s*([^,\n}]*)', content)
                        explanation_match = re.search(r'"explanation"\s*:\s*([^,\n}]*)', content)
                        
                        if translation_match and explanation_match:
                            translation = translation_match.group(1).strip().strip('"')
                            explanation = explanation_match.group(1).strip().strip('"')
                        else:
                            translation = content
                            explanation = "–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é GigaChat"
                            
                except Exception as e2:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e2}")
                    translation = content
                    explanation = "–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é GigaChat"
            
            return translation, explanation
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return text, f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}"