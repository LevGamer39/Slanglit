from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict

class SearchService:
    @staticmethod
    def create_search_results_keyboard(results: List[Dict], offset: int, search_type: str):
        keyboard_buttons = []
        nav_buttons = []
        
        if offset > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_prev_{offset-10}"))
        
        if offset + 10 < len(results):
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"search_next_{offset+10}"))
        
        if nav_buttons:
            keyboard_buttons.append(nav_buttons)
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    @staticmethod
    def format_search_results(results: List[Dict], offset: int, search_type: str, search_text: str):
        page_results = results[offset:offset + 10]
        total_pages = (len(results) + 9) // 10
        
        text = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_text}'\n"
        text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {offset//10 + 1} –∏–∑ {total_pages}:\n\n"
        
        for i, trans in enumerate(page_results, offset + 1):
            direction = trans.get('direction', 'to_formal')
            if direction == 'to_formal':
                text += f"{i}. üíº –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Üí –§–æ—Ä–º–∞–ª—å–Ω—ã–π\n"
                text += f"   üî• `{trans['informal_text']}`\n"
                text += f"   ‚Üí üíº `{trans['formal_text']}`\n"
            else:
                text += f"{i}. üî• –§–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Üí –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π\n"
                text += f"   üíº `{trans['informal_text']}`\n"
                text += f"   ‚Üí üî• `{trans['formal_text']}`\n"
            
            if trans.get('explanation'):
                text += f"   üìñ {trans['explanation']}\n"
            
            text += f"   üìÖ {trans['created_at']}\n\n"
        
        return text