// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class SlanglitApp {
    constructor() {
        this.currentDirection = 'to_formal';
        this.history = [];
        this.currentPage = 1;
        this.itemsPerPage = 8;
        this.userId = this.getUserId();
        this.apiBaseUrl = '/api';
        this.apiAvailable = false;
        
        this.init();
    }

    getUserId() {
        // 1. –ü—Ä–æ–±—É–µ–º Telegram Web App (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
                const userId = tg.initDataUnsafe.user.id.toString();
                console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram user_id:', userId);
                localStorage.setItem('slanglit_user_id', userId);
                localStorage.setItem('slanglit_user_source', 'telegram');
                return userId;
            }
        }
        
        // 2. –ü—Ä–æ–±—É–µ–º –∏–∑ localStorage (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–≤–æ–¥–∏–ª)
        const savedUserId = localStorage.getItem('slanglit_user_id');
        const userSource = localStorage.getItem('slanglit_user_source');
        
        if (savedUserId && userSource === 'telegram') {
            console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π Telegram user_id:', savedUserId);
            return savedUserId;
        }
        
        // 3. –ï—Å–ª–∏ –µ—Å—Ç—å web ID - —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Telegram ID
        if (savedUserId && savedUserId.startsWith('web_')) {
            console.log('üîÑ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π web ID –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Telegram ID');
            localStorage.removeItem('slanglit_user_id');
            localStorage.removeItem('slanglit_user_source');
            return null;
        }
        
        // 4. –ù–µ—Ç ID - –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('‚ö†Ô∏è User ID –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ Telegram ID');
        return null;
    }

    async init() {
        // Telegram Web App –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        if (window.Telegram && window.Telegram.WebApp) {
            this.tg = window.Telegram.WebApp;
            this.tg.ready();
            this.tg.expand();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API
        await this.checkApiConnection();
        
        // –ï—Å–ª–∏ –Ω–µ—Ç user_id - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ Telegram ID
        if (!this.userId) {
            this.showUserIdInput();
            return;
        }
        
        this.bindEvents();
        await this.loadHistory();
        this.renderHistory();
    }

    async checkApiConnection() {
    try {
        console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...');
        console.log('URL:', `${this.apiBaseUrl}/health`);
        
        const response = await fetch(`${this.apiBaseUrl}/health`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });
        
        console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
        console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', Object.fromEntries(response.headers.entries()));
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Ç–µ–∫—Å—Ç —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
        const responseText = await response.text();
        console.log('üìù –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', responseText);
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        let data;
        try {
            data = JSON.parse(responseText);
        } catch (e) {
            console.error('‚ùå –û—Ç–≤–µ—Ç –Ω–µ JSON:', responseText.substring(0, 100));
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ API –∑–∞–ø—É—â–µ–Ω.');
        }
        
        if (response.ok && data.database === 'connected') {
            console.log('‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω:', data);
            this.apiAvailable = true;
            return true;
        } else {
            throw new Error(data.message || 'API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    } catch (error) {
        console.error('‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        this.showError('–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        this.apiAvailable = false;
        return false;
    }
}

    showError(message) {
        const russianText = document.getElementById('russianText');
        const explanationContent = document.querySelector('.explanation-content');
        
        if (russianText) {
            russianText.textContent = '–û—à–∏–±–∫–∞';
            russianText.style.color = '#ff6b6b';
        }
        if (explanationContent) {
            explanationContent.textContent = message;
        }
        
        setTimeout(() => {
            if (russianText) russianText.style.color = '';
        }, 5000);
    }

    showUserIdInput() {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ ID
        const tempContainer = document.createElement('div');
        tempContainer.id = 'temp-user-id-input';
        tempContainer.innerHTML = `
            <div class="user-id-input-container">
                <div class="header">
                    <div class="app-title">–°–ª–µ–Ω–≥–ª–∏—Ç</div>
                    <div class="app-subtitle">–º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</div>
                </div>
                
                <div class="translation-card">
                    <div class="card-label">–í–í–û–î TELEGRAM ID</div>
                    <div style="text-align: center; padding: 20px;">
                        <h4>üîê –¢—Ä–µ–±—É–µ—Ç—Å—è Telegram ID</h4>
                        <p>–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID</p>
                        
                        <div style="background: #2a2f35; padding: 15px; border-radius: 8px; margin: 15px 0; border: 1px solid #44A3B9;">
                            <p><strong>üì± –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Telegram ID:</strong></p>
                            <p>1. –û—Ç–∫—Ä–æ–π—Ç–µ <a href="https://t.me/slenglit_bot?start=start" target="_blank" style="color: #44A3B9; font-weight: bold;">–±–æ—Ç–∞ –≤ Telegram</a></p>
                            <p>2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞</p>
                            <p>3. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ</p>
                        </div>
                        
                        <input type="text" id="userIdInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)" 
                               style="width: 100%; padding: 12px; margin: 10px 0; 
                                      border-radius: 8px; border: 2px solid #44A3B9;
                                      background: #343434; color: white; font-size: 14px;
                                      text-align: center; font-weight: bold;">
                        
                        <div style="display: flex; gap: 10px; margin-top: 15px;">
                            <button onclick="window.app.saveUserId()" 
                                    style="flex: 1; background: #44A3B9; color: white; border: none;
                                           padding: 12px 0; border-radius: 8px; cursor: pointer;
                                           font-size: 14px; font-weight: bold;">
                                ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å ID
                            </button>
                            
                            <button onclick="window.app.continueWithoutId()" 
                                    style="flex: 1; background: transparent; color: #989898; border: 1px solid #989898;
                                           padding: 12px 0; border-radius: 8px; cursor: pointer;
                                           font-size: 12px;">
                                ‚ö†Ô∏è –ë–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏
                            </button>
                        </div>
                        
                        <div style="margin-top: 15px; padding: 10px; background: #2a2f35; border-radius: 6px; font-size: 11px; color: #989898;">
                            <strong>–í–∞–∂–Ω–æ:</strong> –ë–µ–∑ Telegram ID –ø–µ—Ä–µ–≤–æ–¥—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        document.getElementById('main-page').style.display = 'none';
        document.getElementById('history-page').style.display = 'none';
        document.body.appendChild(tempContainer);
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        setTimeout(() => {
            const input = document.getElementById('userIdInput');
            if (input) input.focus();
        }, 100);
    }

    saveUserId() {
        const input = document.getElementById('userIdInput');
        const userId = input.value.trim();
        
        if (!userId) {
            alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID');
            return;
        }
        
        if (!/^\d+$/.test(userId)) {
            alert('‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\n\n–ü—Ä–∏–º–µ—Ä: 5159491775');
            return;
        }
        
        if (userId.length < 5) {
            alert('‚ùå Telegram ID —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ Telegram ID
        localStorage.setItem('slanglit_user_id', userId);
        localStorage.setItem('slanglit_user_source', 'telegram');
        this.userId = userId;
        
        console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω Telegram ID:', userId);
        this.continueWithApp();
    }

    continueWithoutId() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage)
        const tempId = 'temp_' + Date.now();
        this.userId = tempId;
        
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', tempId);
        this.continueWithApp();
    }

    continueWithApp() {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const tempContainer = document.getElementById('temp-user-id-input');
        if (tempContainer) {
            tempContainer.remove();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.getElementById('main-page').style.display = 'flex';
        document.getElementById('history-page').style.display = 'none';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ ID
        this.updateInterfaceForUserId();
        
        this.bindEvents();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å Telegram ID
        if (!this.userId.startsWith('temp_')) {
            this.loadHistory().then(() => this.renderHistory());
        } else {
            this.history = [];
        }
    }

    updateInterfaceForUserId() {
        const explanationContent = document.querySelector('.explanation-content');
        if (explanationContent) {
            if (this.userId.startsWith('temp_')) {
                explanationContent.innerHTML = '–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞<br><small style="color: #ff6b6b;">‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è</small>';
            } else {
                explanationContent.innerHTML = '–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞<br><small style="color: #44A3B9;">‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è</small>';
            }
        }
    }

    bindEvents() {
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        const bigTranslateBtn = document.getElementById('bigTranslateBtn');
        const slangInput = document.getElementById('slangInput');
        const langSwapBtn = document.getElementById('langSwapBtn');
        const translateNavBtn = document.getElementById('translateNavBtn');
        const historyNavBtn = document.getElementById('historyNavBtn');
        const translateNavBtnHistory = document.getElementById('translateNavBtnHistory');
        const historyNavBtnHistory = document.getElementById('historyNavBtnHistory');

        if (bigTranslateBtn) {
            bigTranslateBtn.onclick = () => this.showTranslation();
        }

        if (translateNavBtn) {
            translateNavBtn.onclick = () => this.showMain();
        }

        if (historyNavBtn) {
            historyNavBtn.onclick = () => this.showHistory();
        }

        if (translateNavBtnHistory) {
            translateNavBtnHistory.onclick = () => this.showMain();
        }

        if (historyNavBtnHistory) {
            historyNavBtnHistory.onclick = () => {}; // –£–∂–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        }

        if (langSwapBtn) {
            langSwapBtn.onclick = () => this.switchLanguage();
        }

        if (slangInput) {
            slangInput.onkeypress = (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    this.showTranslation();
                }
            };
        }
    }

    async showTranslation() {
        const inputText = document.getElementById('slangInput').value.trim();
        const russianText = document.getElementById('russianText');
        const explanationContent = document.querySelector('.explanation-content');
        
        if (!inputText) {
            russianText.textContent = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞';
            explanationContent.textContent = '–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞';
            return;
        }

        russianText.textContent = '–ü–µ—Ä–µ–≤–æ–¥–∏–º...';
        explanationContent.textContent = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å...';

        try {
            if (!this.apiAvailable) {
                throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }

            const response = await this.translateViaApi(inputText);
            
            russianText.textContent = response.translated_text;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏
            if (this.userId.startsWith('temp_')) {
                explanationContent.textContent = response.explanation + '\n\n‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é';
            } else {
                explanationContent.textContent = response.explanation;
                await this.loadHistory();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥: ' + error.message);
        }
    }

    async translateViaApi(text) {
        // –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö ID –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
        const userIdToSend = this.userId.startsWith('temp_') ? 'unknown_user' : this.userId;
        
        console.log('üîß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥:', { text, direction: this.currentDirection, userId: userIdToSend });
        
        const response = await fetch(`${this.apiBaseUrl}/translate`, {
            method: 'POST',
            mode: 'cors',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                text: text,
                direction: this.currentDirection,
                user_id: userIdToSend
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ API –ø–µ—Ä–µ–≤–æ–¥–∞:', response.status, errorText);
            throw new Error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${response.status}`);
        }

        const data = await response.json();
        console.log('‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω:', data);
        return data;
    }

    switchLanguage() {
        const slangInput = document.getElementById('slangInput');
        const russianText = document.getElementById('russianText');
        const explanationContent = document.querySelector('.explanation-content');
        
        const leftLangText = document.getElementById('leftLangText');
        const rightLangText = document.getElementById('rightLangText');
        const leftCardLabel = document.getElementById('leftCardLabel');
        const rightCardLabel = document.getElementById('rightCardLabel');
        
        if (this.currentDirection === 'to_formal') {
            this.currentDirection = 'to_informal';
            leftLangText.textContent = '—Ä—É—Å—Å–∫–∏–π';
            rightLangText.textContent = '—Å–ª–µ–Ω–≥–æ–≤—ã–π';
            leftCardLabel.textContent = '–†–£–°–°–ö–ò–ô';
            rightCardLabel.textContent = '–°–õ–ï–ù–ì';
            slangInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ...';
        } else {
            this.currentDirection = 'to_formal';
            leftLangText.textContent = '—Å–ª–µ–Ω–≥–æ–≤—ã–π';
            rightLangText.textContent = '—Ä—É—Å—Å–∫–∏–π';
            leftCardLabel.textContent = '–°–õ–ï–ù–ì';
            rightCardLabel.textContent = '–†–£–°–°–ö–ò–ô';
            slangInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–Ω–≥–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ...';
        }
        
        slangInput.value = '';
        russianText.textContent = '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞...';
        
        if (this.userId.startsWith('temp_')) {
            explanationContent.innerHTML = '–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞<br><small style="color: #ff6b6b;">‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è</small>';
        } else {
            explanationContent.innerHTML = '–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞<br><small style="color: #44A3B9;">‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è</small>';
        }
    }

    async showHistory() {
        document.getElementById('main-page').classList.remove('active');
        document.getElementById('history-page').classList.add('active');
        
        document.getElementById('translateNavBtn').classList.remove('active');
        document.getElementById('historyNavBtn').classList.add('active');
        document.getElementById('translateNavBtnHistory').classList.remove('active');
        document.getElementById('historyNavBtnHistory').classList.add('active');
        
        await this.loadHistory();
        this.renderHistory();
    }

    showMain() {
        document.getElementById('history-page').classList.remove('active');
        document.getElementById('main-page').classList.add('active');
        
        document.getElementById('translateNavBtn').classList.add('active');
        document.getElementById('historyNavBtn').classList.remove('active');
        document.getElementById('translateNavBtnHistory').classList.add('active');
        document.getElementById('historyNavBtnHistory').classList.remove('active');
    }

    async loadHistory() {
        // –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö ID –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if (this.userId.startsWith('temp_')) {
            this.history = [];
            return;
        }

        if (!this.userId || !this.apiAvailable) {
            this.history = [];
            return;
        }

        try {
            console.log('üîß –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.userId);
            
            const response = await fetch(`${this.apiBaseUrl}/history/${this.userId}?limit=100`, {
                method: 'GET',
                mode: 'cors',
                headers: {
                    'Accept': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏`);
            }
            
            const data = await response.json();
            console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', data);
            
            if (data.success) {
                this.history = data.translations.map(trans => ({
                    original: trans.direction === 'to_formal' ? trans.informal_text : trans.formal_text,
                    translation: trans.direction === 'to_formal' ? trans.formal_text : trans.informal_text,
                    explanation: trans.explanation,
                    created_at: trans.created_at
                }));
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
            this.history = [];
        }
    }

    renderHistory() {
        const historyItems = document.getElementById('historyItems');
        const pagination = document.getElementById('pagination');
        
        if (!historyItems) return;
        
        historyItems.innerHTML = '';
        pagination.innerHTML = '';
        
        if (this.history.length === 0) {
            let message = '–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—É—Å—Ç–∞';
            if (this.userId.startsWith('temp_')) {
                message = 'üìù –ò—Å—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞<br><small>–í–≤–µ–¥–∏—Ç–µ Telegram ID –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤</small>';
            } else if (!this.apiAvailable) {
                message = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é';
            }
            
            historyItems.innerHTML = `
                <div class="history-item" style="text-align: center; color: var(--text-secondary); padding: 30px;">
                    ${message}
                </div>
            `;
            return;
        }
        
        const startIndex = (this.currentPage - 1) * this.itemsPerPage;
        const endIndex = startIndex + this.itemsPerPage;
        const currentItems = this.history.slice(startIndex, endIndex);
        
        currentItems.forEach((item) => {
            const historyItem = document.createElement('div');
            historyItem.className = 'history-item';
            historyItem.innerHTML = `
                <div class="history-pair">
                    <div class="history-original">${this.escapeHtml(item.original)}</div>
                    <div class="history-translation">${this.escapeHtml(item.translation)}</div>
                </div>
                <div class="history-explanation">${this.escapeHtml(item.explanation)}</div>
            `;
            
            historyItem.addEventListener('click', () => {
                this.loadHistoryItem(item);
            });
            
            historyItems.appendChild(historyItem);
        });
        
        const totalPages = Math.ceil(this.history.length / this.itemsPerPage);
        
        if (totalPages > 1) {
            pagination.classList.remove('hidden');
            for (let i = 1; i <= totalPages; i++) {
                const pageBtn = document.createElement('button');
                pageBtn.className = `page-btn ${i === this.currentPage ? 'active' : ''}`;
                pageBtn.textContent = i;
                pageBtn.addEventListener('click', () => {
                    this.currentPage = i;
                    this.renderHistory();
                });
                pagination.appendChild(pageBtn);
            }
        } else {
            pagination.classList.add('hidden');
        }
    }

    loadHistoryItem(item) {
        if (this.currentDirection === 'to_formal') {
            document.getElementById('slangInput').value = item.original;
        } else {
            document.getElementById('slangInput').value = item.translation;
        }
        
        this.showTranslation();
        this.showMain();
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function copyText(elementId) {
    const text = document.getElementById(elementId).textContent;
    navigator.clipboard.writeText(text).then(() => {
        console.log('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ' + text);
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ', err);
    });
}

function pasteText(elementId) {
    const input = document.getElementById(elementId);
    navigator.clipboard.readText().then(text => {
        input.value = text;
        const event = new Event('input', { bubbles: true });
        input.dispatchEvent(event);
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: ', err);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlanglitApp...');
    window.app = new SlanglitApp();
});