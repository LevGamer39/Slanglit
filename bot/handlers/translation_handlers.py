from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from utils.keyboards import translation_keyboard, translation_mode_keyboard, get_main_keyboard
from utils.states import TranslationStates
from services.translation_service import TranslationService

router = Router()

@router.message(lambda message: message.text == "üîÑ –ü–µ—Ä–µ–≤–æ–¥")
async def show_translation_options(message: types.Message):
    await message.answer(
        "üîÑ –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:\n\n"
        "ü§ñ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫: GigaChat Neural Network",
        reply_markup=translation_keyboard
    )

@router.message(lambda message: message.text == "üíº –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Üí –§–æ—Ä–º–∞–ª—å–Ω—ã–π")
async def start_formal_translation(message: types.Message, state: FSMContext):
    await state.set_state(TranslationStates.waiting_for_informal)
    await message.answer(
        "‚úÖ –†–µ–∂–∏–º: –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Üí –§–æ—Ä–º–∞–ª—å–Ω—ã–π\n"
        "ü§ñ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫: GigaChat\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n"
        "(–¥–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏ ‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞)",
        reply_markup=translation_mode_keyboard
    )

@router.message(lambda message: message.text == "üî• –§–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Üí –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π")
async def start_informal_translation(message: types.Message, state: FSMContext):
    await state.set_state(TranslationStates.waiting_for_formal)
    await message.answer(
        "‚úÖ –†–µ–∂–∏–º: –§–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Üí –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π\n"
        "ü§ñ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫: GigaChat\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n"
        "(–¥–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏ ‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞)",
        reply_markup=translation_mode_keyboard
    )

@router.message(lambda message: message.text == "‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")
async def exit_translation_mode(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚úÖ –í—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

@router.message(TranslationStates.waiting_for_informal)
async def handle_informal_text(message: types.Message, state: FSMContext, translation_service: TranslationService):
    if message.text == "‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞":
        await state.clear()
        await message.answer("‚úÖ –í—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", reply_markup=get_main_keyboard(message.from_user.id))
        return
    
    if message.content_type != 'text':
        await message.answer("‚ùå –í —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    
    user_text = message.text
    formal_text, explanation = translation_service.translate_to_formal(user_text, message.from_user.id)
    
    response = f"üíº –§–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n`{formal_text}`"
    if explanation:
        response += f"\n\nüìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n{explanation}"
    
    await message.answer(response, parse_mode='Markdown', reply_markup=translation_mode_keyboard)

@router.message(TranslationStates.waiting_for_formal)
async def handle_formal_text(message: types.Message, state: FSMContext, translation_service: TranslationService):
    if message.text == "‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞":
        await state.clear()
        await message.answer("‚úÖ –í—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", reply_markup=get_main_keyboard(message.from_user.id))
        return
    
    if message.content_type != 'text':
        await message.answer("‚ùå –í —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    
    user_text = message.text
    informal_text, explanation = translation_service.translate_to_informal(user_text, message.from_user.id)
    
    response = f"üî• –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n`{informal_text}`"
    if explanation:
        response += f"\n\nüìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n{explanation}"
    
    await message.answer(response, parse_mode='Markdown', reply_markup=translation_mode_keyboard)