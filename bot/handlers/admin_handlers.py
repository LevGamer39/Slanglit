from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from utils.keyboards import get_admin_keyboard, cancel_keyboard, dictionary_management_keyboard, role_selection_keyboard, get_main_keyboard
from utils.states import AdminStates
from services.admin_service import AdminService

router = Router()

@router.message(lambda message: message.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_button(message: types.Message, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    admin_role = admin_service.get_admin_role(message.from_user.id)
    await message.answer(
        f"‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–í–∞—à–∞ —Ä–æ–ª—å: {admin_role})\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(admin_role)
    )

@router.message(lambda message: message.text == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–º")
async def dictionary_management_button(message: types.Message, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    await message.answer(
        "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–º:",
        reply_markup=dictionary_management_keyboard
    )

@router.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def back_to_admin_panel(message: types.Message, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    admin_role = admin_service.get_admin_role(message.from_user.id)
    await message.answer(
        f"‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–í–∞—à–∞ —Ä–æ–ª—å: {admin_role})\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(admin_role)
    )

@router.message(lambda message: message.text == "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
async def show_admins(message: Message, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    admins = admin_service.get_admins_list()
    
    if not admins:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç")
        return
    
    text = "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n\n"
    for admin in admins:
        text += f"üÜî ID: {admin[0]}\n"
        text += f"üë§ –õ–æ–≥–∏–Ω (User ID): {admin[1]}\n"
        text += f"üé≠ –†–æ–ª—å: {admin[2]}\n\n"
    
    text += "üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"
    await message.answer(text)

@router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def add_admin_start(message: Message, state: FSMContext, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    admin_role = admin_service.get_admin_role(message.from_user.id)
    if admin_role != "GreatAdmin":
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ GreatAdmin –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤", reply_markup=get_admin_keyboard(admin_role))
        return
        
    await state.set_state(AdminStates.waiting_for_admin_login)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:\n"
        "üí° ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ @userinfobot\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )

@router.message(AdminStates.waiting_for_admin_login)
async def add_admin_login(message: Message, state: FSMContext, admin_service: AdminService):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        admin_role = admin_service.get_admin_role(message.from_user.id)
        await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_keyboard(admin_role))
        return
    
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    await state.update_data(admin_login=message.text)
    await state.set_state(AdminStates.waiting_for_admin_role)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞:",
        reply_markup=role_selection_keyboard
    )

@router.message(AdminStates.waiting_for_admin_role)
async def add_admin_role(message: Message, state: FSMContext, admin_service: AdminService):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        admin_role = admin_service.get_admin_role(message.from_user.id)
        await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_keyboard(admin_role))
        return
    
    role_map = {"üëë GreatAdmin": "GreatAdmin", "üë§ Admin": "Admin"}
    if message.text not in role_map:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    
    data = await state.get_data()
    admin_login = data['admin_login']
    
    success = admin_service.add_admin(admin_login, role_map[message.text])
    
    if success:
        admin_role = admin_service.get_admin_role(message.from_user.id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_login} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω", reply_markup=get_admin_keyboard(admin_role))
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞")
    
    await state.clear()

@router.message(lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def remove_admin_start(message: Message, state: FSMContext, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    admin_role = admin_service.get_admin_role(message.from_user.id)
    if admin_role != "GreatAdmin":
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ GreatAdmin –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤", reply_markup=get_admin_keyboard(admin_role))
        return
        
    await state.set_state(AdminStates.waiting_for_admin_remove)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )

@router.message(AdminStates.waiting_for_admin_remove)
async def remove_admin_execute(message: Message, state: FSMContext, admin_service: AdminService):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        admin_role = admin_service.get_admin_role(message.from_user.id)
        await message.answer("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_keyboard(admin_role))
        return
    
    try:
        admin_id = int(message.text)
        success = admin_service.remove_admin(admin_id)
        
        if success:
            admin_role = admin_service.get_admin_role(message.from_user.id)
            await message.answer(f"‚úÖ –ê–¥–º–∏–Ω —Å ID {admin_id} —É–¥–∞–ª–µ–Ω", reply_markup=get_admin_keyboard(admin_role))
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞")
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")
        return
    
    await state.clear()

@router.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_admin_stats(message: Message, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    stats = admin_service.get_stats()
    
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
        f"‚Ä¢ üìñ –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {stats.get('total_translations', 0)}\n"
        f"‚Ä¢ üìö –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {stats.get('total_words', 0)}\n"
        f"‚Ä¢ üî¢ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {stats.get('total_usage', 0)}"
    )
    
    await message.answer(text)