from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from utils.keyboards import get_admin_keyboard, cancel_keyboard, role_selection_keyboard, get_main_keyboard, get_stats_keyboard, get_user_stats_keyboard
from utils.states import AdminStates, StatsStates
from services.admin_service import AdminService
from datetime import datetime

router = Router()

@router.message(lambda message: message.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_button(message: types.Message, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    admin_role = admin_service.get_admin_role(message.from_user.id)
    await message.answer(
        f"‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–í–∞—à–∞ —Ä–æ–ª—å: {admin_role})\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(admin_role)
    )

@router.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def back_to_admin_panel(message: types.Message, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    admin_role = admin_service.get_admin_role(message.from_user.id)
    await message.answer(
        f"‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–í–∞—à–∞ —Ä–æ–ª—å: {admin_role})\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(admin_role)
    )

@router.message(lambda message: message.text == "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
async def show_admins(message: Message, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    admins = admin_service.get_admins_list()
    
    if not admins:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç")
        return
    
    text = "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n\n"
    for admin in admins:
        text += f"üÜî ID: {admin[0]}\n"
        text += f"üë§ –õ–æ–≥–∏–Ω (User ID): {admin[1]}\n"
        text += f"üé≠ –†–æ–ª—å: {admin[2]}\n\n"
    
    text += "üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"
    await message.answer(text)

@router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def add_admin_start(message: Message, state: FSMContext, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    admin_role = admin_service.get_admin_role(message.from_user.id)
    if admin_role != "GreatAdmin":
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ GreatAdmin –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤", reply_markup=get_admin_keyboard(admin_role))
        return
        
    await state.set_state(AdminStates.waiting_for_admin_login)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:\n"
        "üí° ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ @userinfobot\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )

@router.message(AdminStates.waiting_for_admin_login)
async def add_admin_login(message: Message, state: FSMContext, admin_service: AdminService):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        admin_role = admin_service.get_admin_role(message.from_user.id)
        await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_keyboard(admin_role))
        return
    
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    await state.update_data(admin_login=message.text)
    await state.set_state(AdminStates.waiting_for_admin_role)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞:",
        reply_markup=role_selection_keyboard
    )

@router.message(AdminStates.waiting_for_admin_role)
async def add_admin_role(message: Message, state: FSMContext, admin_service: AdminService):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        admin_role = admin_service.get_admin_role(message.from_user.id)
        await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_keyboard(admin_role))
        return
    
    role_map = {"üëë GreatAdmin": "GreatAdmin", "üë§ Admin": "Admin"}
    if message.text not in role_map:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    
    data = await state.get_data()
    admin_login = data['admin_login']
    
    success = admin_service.add_admin(admin_login, role_map[message.text])
    
    if success:
        admin_role = admin_service.get_admin_role(message.from_user.id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_login} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω", reply_markup=get_admin_keyboard(admin_role))
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞")
    
    await state.clear()

@router.message(lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def remove_admin_start(message: Message, state: FSMContext, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    admin_role = admin_service.get_admin_role(message.from_user.id)
    if admin_role != "GreatAdmin":
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ GreatAdmin –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤", reply_markup=get_admin_keyboard(admin_role))
        return
        
    await state.set_state(AdminStates.waiting_for_admin_remove)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞ (–∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )

@router.message(AdminStates.waiting_for_admin_remove)
async def remove_admin_execute(message: Message, state: FSMContext, admin_service: AdminService):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        admin_role = admin_service.get_admin_role(message.from_user.id)
        await message.answer("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_keyboard(admin_role))
        return
    
    try:
        admin_id = int(message.text)
        success = admin_service.remove_admin(admin_id)
        
        if success:
            admin_role = admin_service.get_admin_role(message.from_user.id)
            await message.answer(f"‚úÖ –ê–¥–º–∏–Ω —Å ID {admin_id} —É–¥–∞–ª–µ–Ω", reply_markup=get_admin_keyboard(admin_role))
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞")
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ)")
        return
    
    await state.clear()

@router.message(lambda message: message.text == "üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_basic_stats(message: Message, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    stats = admin_service.get_stats()
    
    text = (
        "üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
        f"‚Ä¢ üìñ –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {stats.get('total_translations', 0)}\n"
        f"‚Ä¢ üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('unique_users', 0)}\n"
        f"‚Ä¢ üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {stats.get('total_admins', 0)}\n\n"
        "ü§ñ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫: GigaChat Neural Network"
    )
    
    await message.answer(text, reply_markup=get_stats_keyboard())

@router.message(lambda message: message.text == "üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_detailed_stats(message: Message, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    stats = admin_service.get_detailed_stats()
    
    text = "üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
    text += f"‚Ä¢ üìä –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {stats.get('total_translations', 0)}\n"
    text += f"‚Ä¢ üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('unique_users', 0)}\n"
    text += f"‚Ä¢ üíº ‚Üí –§–æ—Ä–º–∞–ª—å–Ω—ã—Ö: {stats.get('to_formal_count', 0)}\n"
    text += f"‚Ä¢ üî• ‚Üí –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö: {stats.get('to_informal_count', 0)}\n"
    text += f"‚Ä¢ üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π: {stats.get('last_week_activity', 0)}\n\n"
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users = stats.get('top_users', [])
    if top_users:
        text += "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for i, (user_id, count) in enumerate(top_users[:5], 1):
            text += f"{i}. ID {user_id}: {count} –ø–µ—Ä–µ–≤–æ–¥–æ–≤\n"
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
    popular_words = stats.get('popular_words', [])
    if popular_words:
        text += "\nüî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞:\n"
        for i, (word, count) in enumerate(popular_words[:5], 1):
            text += f"{i}. '{word}': {count} —Ä–∞–∑\n"
    
    await message.answer(text, reply_markup=get_stats_keyboard())

@router.message(lambda message: message.text == "üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def show_user_stats_menu(message: Message):
    await message.answer(
        "üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_stats_keyboard()
    )

@router.message(lambda message: message.text == "üë§ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def show_top_users(message: Message, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    stats = admin_service.get_detailed_stats()
    top_users = stats.get('top_users', [])
    
    if not top_users:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
        return
    
    text = "üèÜ –¢–æ–ø —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, (user_id, count) in enumerate(top_users, 1):
        user_stats = admin_service.get_user_stats(user_id)
        text += f"{i}. üë§ ID: {user_id}\n"
        text += f"   üìä –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {count}\n"
        text += f"   üíº ‚Üí –§–æ—Ä–º–∞–ª—å–Ω—ã—Ö: {user_stats.get('user_to_formal', 0)}\n"
        text += f"   üî• ‚Üí –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö: {user_stats.get('user_to_informal', 0)}\n"
        
        if user_stats.get('last_activity'):
            text += f"   üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_activity'][:16]}\n"
        
        text += "\n"
    
    await message.answer(text, reply_markup=get_user_stats_keyboard())

@router.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def search_user_start(message: Message, state: FSMContext, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    await state.set_state(StatsStates.waiting_for_user_search)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )

@router.message(StatsStates.waiting_for_user_search)
async def show_user_stats(message: Message, state: FSMContext, admin_service: AdminService):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚úÖ –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=get_user_stats_keyboard())
        return
    
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    user_id = int(message.text)
    user_stats = admin_service.get_user_stats(user_id)
    
    if user_stats['user_translations'] == 0:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
        return
    
    text = f"üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}\n\n"
    text += f"üìä –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {user_stats['user_translations']}\n"
    text += f"üíº ‚Üí –§–æ—Ä–º–∞–ª—å–Ω—ã—Ö: {user_stats['user_to_formal']}\n"
    text += f"üî• ‚Üí –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö: {user_stats['user_to_informal']}\n"
    
    if user_stats.get('last_activity'):
        text += f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_activity'][:16]}\n"
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    popular_words = user_stats.get('user_popular_words', [])
    if popular_words:
        text += "\nüî• –ß–∞—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã–µ —Å–ª–æ–≤–∞:\n"
        for i, (word, count) in enumerate(popular_words, 1):
            text += f"{i}. '{word}': {count} —Ä–∞–∑\n"
    
    await state.clear()
    await message.answer(text, reply_markup=get_user_stats_keyboard())

@router.message(lambda message: message.text == "üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
async def show_realtime_stats(message: Message, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    stats = admin_service.get_realtime_stats()
    detailed_stats = admin_service.get_detailed_stats()
    
    text = "üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:\n\n"
    text += f"‚Ä¢ üìä –ü–µ—Ä–µ–≤–æ–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats.get('today_translations', 0)}\n"
    text += f"‚Ä¢ ‚è∞ –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {stats.get('last_hour_activity', 0)}\n"
    text += f"‚Ä¢ ‚ö° –ü–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç: {stats.get('last_15min_activity', 0)}\n"
    text += f"‚Ä¢ üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('active_users_today', 0)}\n\n"
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
    daily_stats = detailed_stats.get('daily_stats', [])
    if daily_stats:
        text += "üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:\n"
        for day, count in daily_stats[:7]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            text += f"‚Ä¢ {day}: {count} –ø–µ—Ä–µ–≤–æ–¥–æ–≤\n"
    
    await message.answer(text, reply_markup=get_stats_keyboard())

@router.message(lambda message: message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"])
async def back_to_stats(message: Message, admin_service: AdminService):
    if not admin_service.is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
        
    admin_role = admin_service.get_admin_role(message.from_user.id)
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        await message.answer(
            f"‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–í–∞—à–∞ —Ä–æ–ª—å: {admin_role})\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_keyboard(admin_role)
        )
    else:
        await message.answer(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=get_stats_keyboard()
        )