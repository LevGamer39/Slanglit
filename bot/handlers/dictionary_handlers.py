from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from utils.keyboards import (get_main_keyboard, cancel_keyboard, dictionary_management_keyboard, 
                           confirm_keyboard, get_dictionary_main_keyboard, get_alphabet_keyboard,
                           get_letter_navigation_keyboard)
from utils.states import AddWordStates, DeleteWordStates, SearchStates
from services.dictionary_service import DictionaryService

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–ª–æ–≤–∞—Ä—è
@router.message(lambda message: message.text == "üìö –°–ª–æ–≤–∞—Ä—å")
async def dictionary_main_menu(message: types.Message):
    await message.answer(
        "üìö –°–ª–æ–≤–∞—Ä—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_dictionary_main_keyboard()
    )

@router.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å–ª–æ–≤–∞—Ä—å")
async def back_to_dictionary_main(message: types.Message):
    await dictionary_main_menu(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
@router.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ")
async def search_dictionary_button(message: types.Message, state: FSMContext):
    await state.set_state(SearchStates.waiting_for_search)
    await state.update_data(search_type="dictionary")
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ:\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )

# –ê–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
@router.message(lambda message: message.text == "üî§ –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É")
async def show_alphabet(message: types.Message, dictionary_service: DictionaryService):
    alphabet_stats = dictionary_service.get_alphabet_stats()
    
    text = "üî§ –í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ–≤:\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—É–∫–≤–∞–º
    russian_alphabet = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    stats_lines = []
    
    for i in range(0, len(russian_alphabet), 9):
        line_letters = russian_alphabet[i:i+9]
        stats_line = ""
        for letter in line_letters:
            count = alphabet_stats.get(letter, 0)
            stats_line += f"{letter}:{count} "
        stats_lines.append(stats_line)
    
    text += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—É–∫–≤–∞–º:\n"
    text += "\n".join(stats_lines)
    
    text += "\n\nALL - –≤—Å–µ —Å–ª–æ–≤–∞"
    
    await message.answer(text, reply_markup=get_alphabet_keyboard())

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–ª–æ–≤ (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
@router.message(lambda message: message.text == "üìÑ –í—Å–µ —Å–ª–æ–≤–∞")
async def show_all_words(message: types.Message, dictionary_service: DictionaryService):
    await show_dictionary_page(message, dictionary_service)

async def show_dictionary_page(message: types.Message, dictionary_service: DictionaryService, offset: int = 0):
    words = dictionary_service.get_dictionary_page(limit=10, offset=offset)
    total_words = dictionary_service.get_dictionary_count()
    
    if not words:
        await message.answer("üì≠ –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç")
        return
    
    text = f"üìö –í—Å–µ —Å–ª–æ–≤–∞ (—Å—Ç—Ä. {offset//10 + 1} –∏–∑ {(total_words-1)//10 + 1}):\n\n"
    for i, word in enumerate(words, offset + 1):
        text += f"{i}.\tüî• `{word['informal_text']}`\n"
        text += f"\tüíº `{word['formal_text']}`"
        if word.get('explanation'):
            text += f"\n\tüìñ {word['explanation']}\n\n"
        else:
            text += "\n\n"
    
    keyboard_buttons = []
    keyboard_buttons.append([InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ", callback_data="search_dictionary")])
    keyboard_buttons.append([InlineKeyboardButton(text="üî§ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–ª—Ñ–∞–≤–∏—Ç—É", callback_data="show_alphabet")])
    
    nav_buttons = []
    if offset > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"dict_prev_{offset-10}"))
    if offset + 10 < total_words:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"dict_next_{offset+10}"))
    
    if nav_buttons:
        keyboard_buttons.append(nav_buttons)
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    if isinstance(message, CallbackQuery):
        await message.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await message.answer(text, parse_mode='Markdown', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—É–∫–≤—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –•–ï–ù–î–õ–ï–†
@router.message(lambda message: message.text and (
    message.text in [chr(i) for i in range(1040, 1072)] + ['–Å', 'ALL', '0-9'] or 
    (message.text.startswith('üîò ') and message.text.replace('üîò ', '').strip() in [chr(i) for i in range(1040, 1072)] + ['–Å', 'ALL', '0-9'])
))
async def show_words_by_letter(message: types.Message, dictionary_service: DictionaryService):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—É–∫–≤—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –µ—Å—Ç—å)
    letter_text = message.text.replace('üîò ', '').strip()
    
    if letter_text == 'ALL':
        await show_all_words(message, dictionary_service)
        return
    
    await show_letter_words(message, dictionary_service, letter_text, 0)

async def show_letter_words(message: types.Message, dictionary_service: DictionaryService, letter: str, offset: int = 0):
    if letter == '0-9':
        # –î–ª—è —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        words = dictionary_service.get_words_by_letter('0-9', 1000)  # –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è —Ü–∏—Ñ—Ä
        total_words = dictionary_service.get_words_count_by_letter('0-9')
        page_words = words[offset:offset+10]
    else:
        words = dictionary_service.get_words_by_letter(letter, 10, offset)
        total_words = dictionary_service.get_words_count_by_letter(letter)
        page_words = words
    
    if not page_words:
        await message.answer(f"üì≠ –ù–∞ –±—É–∫–≤—É '{letter}' —Å–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    if letter == '0-9':
        text = f"üî¢ –¶–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã (—Å—Ç—Ä. {offset//10 + 1} –∏–∑ {(total_words-1)//10 + 1}):\n\n"
    else:
        text = f"üî§ –°–ª–æ–≤–∞ –Ω–∞ –±—É–∫–≤—É '{letter}' (—Å—Ç—Ä. {offset//10 + 1} –∏–∑ {(total_words-1)//10 + 1}):\n\n"
    
    for i, word in enumerate(page_words, offset + 1):
        text += f"{i}.\tüî• `{word['informal_text']}`\n"
        text += f"\tüíº `{word['formal_text']}`"
        if word.get('explanation'):
            text += f"\n\tüìñ {word['explanation']}\n\n"
        else:
            text += "\n\n"
    
    reply_markup = get_letter_navigation_keyboard(letter, offset, total_words)
    
    if isinstance(message, CallbackQuery):
        await message.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await message.answer(text, parse_mode='Markdown', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±—É–∫–≤–∞–º
@router.callback_query(lambda c: c.data.startswith('letter_'))
async def handle_letter_pagination(callback: CallbackQuery, dictionary_service: DictionaryService):
    try:
        # –§–æ—Ä–º–∞—Ç: letter_{letter}_{action}_{offset}
        parts = callback.data.split('_')
        letter = parts[1]
        action = parts[2]
        offset = int(parts[3])
        
        await show_letter_words(callback, dictionary_service, letter, offset)
        await callback.answer()
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_letter_pagination: {e}")

@router.callback_query(lambda c: c.data == "back_to_alphabet")
async def back_to_alphabet(callback: CallbackQuery, dictionary_service: DictionaryService):
    await callback.message.delete()
    await show_alphabet(callback.message, dictionary_service)

@router.callback_query(lambda c: c.data == "show_alphabet")
async def show_alphabet_callback(callback: CallbackQuery, dictionary_service: DictionaryService):
    await callback.message.delete()
    await show_alphabet(callback.message, dictionary_service)

# –°—Ç–∞—Ä–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@router.callback_query(lambda c: c.data.startswith('dict_'))
async def handle_dictionary_pagination(callback: CallbackQuery, dictionary_service: DictionaryService):
    try:
        action, offset = callback.data.split('_')[1:]
        offset = int(offset)
        await show_dictionary_page(callback, dictionary_service, offset)
        await callback.answer()
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_dictionary_pagination: {e}")

# –ü–æ–∏—Å–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ (–∏–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏)
@router.callback_query(lambda c: c.data == "search_dictionary")
async def start_search_dictionary_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SearchStates.waiting_for_search)
    await state.update_data(search_type="dictionary")
    await callback.message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ:\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )
    await callback.answer()

# –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤)
@router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")
async def add_word_start(message: types.Message, state: FSMContext):
    await state.set_state(AddWordStates.waiting_for_informal)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É:\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )

@router.message(AddWordStates.waiting_for_informal)
async def add_word_informal(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=dictionary_management_keyboard)
        return
    
    await state.update_data(informal=message.text)
    await state.set_state(AddWordStates.waiting_for_formal)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )

@router.message(AddWordStates.waiting_for_formal)
async def add_word_formal(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=dictionary_management_keyboard)
        return
    
    await state.update_data(formal=message.text)
    await state.set_state(AddWordStates.waiting_for_explanation)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )

@router.message(AddWordStates.waiting_for_explanation)
async def add_word_explanation(message: types.Message, state: FSMContext, dictionary_service: DictionaryService):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=dictionary_management_keyboard)
        return
    
    data = await state.get_data()
    informal = data['informal']
    formal = data['formal']
    explanation = message.text if message.text != '-' else ''
    
    if dictionary_service.add_word(informal, formal, explanation):
        response = f"‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å:\nüî• `{informal}` ‚Üí üíº `{formal}`"
        if explanation:
            response += f"\nüìö {explanation}"
        await message.answer(response, parse_mode='Markdown', reply_markup=dictionary_management_keyboard)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞", reply_markup=dictionary_management_keyboard)
    
    await state.clear()

@router.message(lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")
async def delete_word_start(message: types.Message, state: FSMContext):
    await state.set_state(DeleteWordStates.waiting_for_word_input)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )

@router.message(DeleteWordStates.waiting_for_word_input)
async def delete_word_input(message: types.Message, state: FSMContext, dictionary_service: DictionaryService):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=dictionary_management_keyboard)
        return
    
    word_text = message.text.strip()
    word = dictionary_service.get_word_by_informal(word_text)
    
    if not word:
        await message.answer(f"‚ùå –°–ª–æ–≤–æ `{word_text}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ")
        return
    
    await state.update_data(word_to_delete=word_text)
    await state.set_state(DeleteWordStates.waiting_for_confirmation)
    
    text = f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ?\n\n"
    text += f"üî• `{word['informal_text']}` ‚Üí üíº `{word['formal_text']}`"
    if word.get('explanation'):
        text += f"\nüìö {word['explanation']}"
    
    await message.answer(text, parse_mode='Markdown', reply_markup=confirm_keyboard)

@router.message(DeleteWordStates.waiting_for_confirmation)
async def delete_word_confirmation(message: types.Message, state: FSMContext, dictionary_service: DictionaryService):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=dictionary_management_keyboard)
        return
    
    if message.text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å":
        data = await state.get_data()
        word_text = data['word_to_delete']
        
        if dictionary_service.delete_word(word_text):
            await message.answer(f"‚úÖ –°–ª–æ–≤–æ `{word_text}` —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è", reply_markup=dictionary_management_keyboard)
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ `{word_text}`", reply_markup=dictionary_management_keyboard)
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫")
        return
    
    await state.clear()