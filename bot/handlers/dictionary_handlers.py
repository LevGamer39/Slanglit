from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from utils.keyboards import get_main_keyboard, cancel_keyboard, dictionary_management_keyboard, confirm_keyboard
from utils.states import AddWordStates, DeleteWordStates
from services.dictionary_service import DictionaryService

router = Router()

@router.message(lambda message: message.text == "üìö –°–ª–æ–≤–∞—Ä—å")
async def dictionary_button(message: types.Message, dictionary_service: DictionaryService):
    await show_dictionary_page(message, dictionary_service)

async def show_dictionary_page(message: types.Message, dictionary_service: DictionaryService, offset: int = 0):
    words = dictionary_service.get_dictionary_page(limit=10, offset=offset)
    total_words = dictionary_service.get_dictionary_count()
    
    if not words:
        await message.answer("üì≠ –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç")
        return
    
    text = f"üìö –°–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤ (—Å—Ç—Ä. {offset//10 + 1} –∏–∑ {(total_words-1)//10 + 1}):\n\n"
    for i, word in enumerate(words, offset + 1):
        text += f"{i}. üî• `{word['informal_text']}` ‚Üí üíº `{word['formal_text']}`"
        if word.get('explanation'):
            text += f"\n   üìñ {word['explanation']}\n\n"
        else:
            text += "\n\n"
    
    keyboard_buttons = []
    keyboard_buttons.append([InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ", callback_data="search_dictionary")])
    
    nav_buttons = []
    if offset > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"dict_prev_{offset-10}"))
    if offset + 10 < total_words:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"dict_next_{offset+10}"))
    
    if nav_buttons:
        keyboard_buttons.append(nav_buttons)
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    if isinstance(message, CallbackQuery):
        await message.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await message.answer(text, parse_mode='Markdown', reply_markup=reply_markup)

@router.callback_query(lambda c: c.data.startswith('dict_'))
async def handle_dictionary_pagination(callback: CallbackQuery, dictionary_service: DictionaryService):
    try:
        action, offset = callback.data.split('_')[1:]
        offset = int(offset)
        await show_dictionary_page(callback, dictionary_service, offset)
        await callback.answer()
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_dictionary_pagination: {e}")

@router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")
async def add_word_start(message: types.Message, state: FSMContext):
    await state.set_state(AddWordStates.waiting_for_informal)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É:\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )

@router.message(AddWordStates.waiting_for_informal)
async def add_word_informal(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=dictionary_management_keyboard)
        return
    
    await state.update_data(informal=message.text)
    await state.set_state(AddWordStates.waiting_for_formal)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )

@router.message(AddWordStates.waiting_for_formal)
async def add_word_formal(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=dictionary_management_keyboard)
        return
    
    await state.update_data(formal=message.text)
    await state.set_state(AddWordStates.waiting_for_explanation)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )

@router.message(AddWordStates.waiting_for_explanation)
async def add_word_explanation(message: types.Message, state: FSMContext, dictionary_service: DictionaryService):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=dictionary_management_keyboard)
        return
    
    data = await state.get_data()
    informal = data['informal']
    formal = data['formal']
    explanation = message.text if message.text != '-' else ''
    
    if dictionary_service.add_word(informal, formal, explanation):
        response = f"‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å:\nüî• `{informal}` ‚Üí üíº `{formal}`"
        if explanation:
            response += f"\nüìö {explanation}"
        await message.answer(response, parse_mode='Markdown', reply_markup=dictionary_management_keyboard)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞", reply_markup=dictionary_management_keyboard)
    
    await state.clear()

@router.message(lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")
async def delete_word_start(message: types.Message, state: FSMContext):
    await state.set_state(DeleteWordStates.waiting_for_word_input)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ\n"
        "(–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)",
        reply_markup=cancel_keyboard
    )

@router.message(DeleteWordStates.waiting_for_word_input)
async def delete_word_input(message: types.Message, state: FSMContext, dictionary_service: DictionaryService):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=dictionary_management_keyboard)
        return
    
    word_text = message.text.strip()
    word = dictionary_service.get_word_by_informal(word_text)
    
    if not word:
        await message.answer(f"‚ùå –°–ª–æ–≤–æ `{word_text}` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ")
        return
    
    await state.update_data(word_to_delete=word_text)
    await state.set_state(DeleteWordStates.waiting_for_confirmation)
    
    text = f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ?\n\n"
    text += f"üî• `{word['informal_text']}` ‚Üí üíº `{word['formal_text']}`"
    if word.get('explanation'):
        text += f"\nüìö {word['explanation']}"
    
    await message.answer(text, parse_mode='Markdown', reply_markup=confirm_keyboard)

@router.message(DeleteWordStates.waiting_for_confirmation)
async def delete_word_confirmation(message: types.Message, state: FSMContext, dictionary_service: DictionaryService):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=dictionary_management_keyboard)
        return
    
    if message.text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å":
        data = await state.get_data()
        word_text = data['word_to_delete']
        
        if dictionary_service.delete_word(word_text):
            await message.answer(f"‚úÖ –°–ª–æ–≤–æ `{word_text}` —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è", reply_markup=dictionary_management_keyboard)
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ `{word_text}`", reply_markup=dictionary_management_keyboard)
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫")
        return
    
    await state.clear()