from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from services.history_service import HistoryService

router = Router()

@router.message(lambda message: message.text == "üìñ –ò—Å—Ç–æ—Ä–∏—è")
async def history_button(message: types.Message, history_service: HistoryService):
    await show_history(message, history_service)

async def show_history(message: types.Message, history_service: HistoryService, offset: int = 0):
    translations = history_service.get_user_history(message.from_user.id, 1000)
    
    if not translations:
        await message.answer("üì≠ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—É—Å—Ç–∞")
        return
    
    if offset >= len(translations):
        offset = 0
    
    page_translations = translations[offset:offset+10]
    
    if not page_translations:
        await message.answer("üì≠ –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
        return
    
    text = f"üìñ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (—Å—Ç—Ä. {offset//10 + 1} –∏–∑ {(len(translations)-1)//10 + 1}):\n\n"
    for i, trans in enumerate(page_translations, offset + 1):
        direction = trans.get('direction', 'to_formal')
        if direction == 'to_formal':
            text += f"{i}. üíº –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Üí –§–æ—Ä–º–∞–ª—å–Ω—ã–π\n"
            text += f"   üî• `{trans['informal_text']}`\n"
            text += f"   ‚Üí üíº `{trans['formal_text']}`\n"
        else:
            text += f"{i}. üî• –§–æ—Ä–º–∞–ª—å–Ω—ã–π ‚Üí –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π\n"
            text += f"   üíº `{trans['informal_text']}`\n"
            text += f"   ‚Üí üî• `{trans['formal_text']}`\n"
        text += f"   üìÖ {trans['created_at']}\n\n"
    
    keyboard_buttons = []
    keyboard_buttons.append([InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏", callback_data="search_history")])
    
    nav_buttons = []
    if offset > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history_prev_{offset-10}"))
    if offset + 10 < len(translations):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"history_next_{offset+10}"))
    
    if nav_buttons:
        keyboard_buttons.append(nav_buttons)
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    if isinstance(message, CallbackQuery):
        await message.message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await message.answer(text, reply_markup=reply_markup, parse_mode='Markdown')

@router.callback_query(lambda c: c.data.startswith('history_'))
async def handle_history_pagination(callback: CallbackQuery, history_service: HistoryService):
    try:
        action, offset = callback.data.split('_')[1:]
        offset = int(offset)
        await show_history(callback, history_service, offset)
        await callback.answer()
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_history_pagination: {e}")