from flask import Flask, request, jsonify, g
from flask_cors import CORS
import sqlite3
import json
from datetime import datetime
from services.gigachat_service import GigaChatService
from database import FDataBase
import os

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
DATABASE = 'translations.db'

def get_db():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    if not hasattr(g, 'sqlite_db'):
        try:
            g.sqlite_db = sqlite3.connect(DATABASE)
            g.sqlite_db.row_factory = sqlite3.Row
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –≤ –ø–æ—Ç–æ–∫–µ {os.getpid()}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return None
    return g.sqlite_db

def get_db_instance():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä FDataBase –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    db_connection = get_db()
    if db_connection:
        return FDataBase(db_connection)
    return None

@app.teardown_appcontext
def close_db(error):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞"""
    if hasattr(g, 'sqlite_db'):
        g.sqlite_db.close()
        print("üîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä)
try:
    gigachat = GigaChatService()
    gigachat_available = True
    print("‚úÖ GigaChat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GigaChat: {e}")
    gigachat_available = False

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API –∏ –ë–î"""
    try:
        db = get_db_instance()
        if db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ë–î –æ—Ç–≤–µ—á–∞–µ—Ç
            test_query = db.get_user_translations('test', 1)
            db_status = "connected"
            message = "API –∏ –ë–î —Ä–∞–±–æ—Ç–∞—é—Ç"
        else:
            db_status = "disconnected"
            message = "–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        db_status = "error"
        message = f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}"
    
    status = {
        "status": "ok" if db_status == "connected" else "error",
        "database": db_status,
        "gigachat": "connected" if gigachat_available else "disconnected",
        "message": message
    }
    return jsonify(status)

@app.route('/api/translate', methods=['POST'])
def translate_text():
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GigaChat —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GigaChat
        if not gigachat_available:
            return jsonify({
                "error": "–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "details": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            }), 503
        
        data = request.get_json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not data or 'text' not in data or 'direction' not in data or 'user_id' not in data:
            return jsonify({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: text, direction, user_id"}), 400
        
        text = data['text'].strip()
        direction = data['direction']
        user_id = data['user_id']
        
        if not text:
            return jsonify({"error": "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        if direction not in ['to_formal', 'to_informal']:
            return jsonify({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"}), 400
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ GigaChat
        if direction == 'to_formal':
            translation, explanation = gigachat.translate_text(text, "to_formal")
            # –î–ª—è to_formal: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç = –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –ø–µ—Ä–µ–≤–æ–¥ = —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π
            informal_text = text
            formal_text = translation
        else:
            translation, explanation = gigachat.translate_text(text, "to_informal")
            # –î–ª—è to_informal: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç = —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –ø–µ—Ä–µ–≤–æ–¥ = –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π
            informal_text = translation
            formal_text = text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
        db = get_db_instance()
        if db:
            success = db.add_translation(informal_text, formal_text, explanation, user_id, direction)
            if not success:
                print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –Ω–æ –ø–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        else:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            "success": True,
            "original_text": text,
            "translated_text": translation,
            "explanation": explanation,
            "direction": direction,
            "timestamp": datetime.now().isoformat(),
            "saved_to_db": bool(db)  # –°–æ–æ–±—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –ª–∏ –≤ –ë–î
        }
        
        return jsonify(response)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ API –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

@app.route('/api/history/<user_id>', methods=['GET'])
def get_user_history(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = get_db_instance()
        if not db:
            return jsonify({"error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}), 503
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        limit = request.args.get('limit', default=100, type=int)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î
        translations = db.get_user_translations(user_id, limit)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        history = []
        for trans in translations:
            direction = trans.get('direction', 'to_formal')
            
            history.append({
                "id": trans['id'],
                "informal_text": trans['informal_text'],
                "formal_text": trans['formal_text'],
                "explanation": trans['explanation'],
                "direction": direction,
                "created_at": trans['created_at']
            })
        
        return jsonify({
            "success": True,
            "user_id": user_id,
            "translations": history,
            "total": len(history)
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"}), 500

@app.route('/api/stats/<user_id>', methods=['GET'])
def get_user_stats(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db = get_db_instance()
        if not db:
            return jsonify({"error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}), 503
        
        translations = db.get_user_translations(user_id, 1000)
        
        stats = {
            "total_translations": len(translations),
            "to_formal_count": len([t for t in translations if t.get('direction') == 'to_formal']),
            "to_informal_count": len([t for t in translations if t.get('direction') == 'to_informal']),
            "last_activity": translations[0]['created_at'] if translations else None
        }
        
        return jsonify({
            "success": True,
            "user_id": user_id,
            "stats": stats
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"}), 500

@app.route('/api/test-db', methods=['GET'])
def test_db():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î"""
    try:
        db = get_db_instance()
        if db:
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            test_result = db.get_user_translations('test_user', 1)
            return jsonify({
                "success": True,
                "message": "–ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                "test_query_result": len(test_result) if test_result else 0
            })
        else:
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î"}), 503
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ë–î: {str(e)}"}), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é...")
    print("üìä –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("   POST /api/translate - –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")
    print("   GET  /api/history/<user_id> - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") 
    print("   GET  /api/stats/<user_id> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("   GET  /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞")
    print("   GET  /api/test-db - —Ç–µ—Å—Ç –ë–î")
    print("üîß –ü–æ—Ä—Ç: 5000")
    print("‚ö° –†–µ–∂–∏–º: –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –ë–î")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –±–µ–∑ debug (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º)
    app.run(host='0.0.0.0', port=5000, debug=False, threaded=True)