from flask import Flask, request, jsonify, g
from flask_cors import CORS, cross_origin
import sqlite3
import json
from datetime import datetime
import os

app = Flask(__name__)

# –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò CORS –î–õ–Ø –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ô –†–ê–ë–û–¢–´
app.config['CORS_HEADERS'] = 'Content-Type'
app.config['CORS_SUPPORTS_CREDENTIALS'] = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CORS —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —à–∏—Ä–æ–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
CORS(app, 
     origins="*",
     methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
     allow_headers=["*"],
     expose_headers=["*"],
     supports_credentials=False,
     max_age=600)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
DATABASE = 'translations.db'

# –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê CORS –î–õ–Ø –í–°–ï–• –ó–ê–ü–†–û–°–û–í
@app.after_request
def after_request(response):
    """–î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ –ö–ê–ñ–î–û–ú–£ –æ—Ç–≤–µ—Ç—É"""
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization,Accept,Origin,X-Requested-With')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
    response.headers.add('Access-Control-Expose-Headers', 'Content-Length,Content-Range')
    response.headers.add('Access-Control-Max-Age', '600')
    return response

@app.before_request
def handle_preflight():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS"""
    if request.method == 'OPTIONS':
        response = jsonify({'status': 'preflight'})
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', '*')
        response.headers.add('Access-Control-Allow-Methods', '*')
        return response

def get_db():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        db = sqlite3.connect(DATABASE)
        db.row_factory = sqlite3.Row
        return db
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    try:
        db = sqlite3.connect(DATABASE)
        cursor = db.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS translations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                informal_text TEXT NOT NULL,
                formal_text TEXT NOT NULL,
                explanation TEXT,
                user_id TEXT NOT NULL,
                direction TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ user_id
        cursor.execute('''
            CREATE INDEX IF NOT EXISTS idx_user_id ON translations(user_id)
        ''')
        
        db.commit()
        db.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

# –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
class DatabaseManager:
    @staticmethod
    def add_translation(informal_text, formal_text, explanation, user_id, direction):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ë–î"""
        try:
            db = sqlite3.connect(DATABASE)
            cursor = db.cursor()
            
            cursor.execute('''
                INSERT INTO translations (informal_text, formal_text, explanation, user_id, direction, created_at)
                VALUES (?, ?, ?, ?, ?, datetime('now'))
            ''', (informal_text, formal_text, explanation, user_id, direction))
            
            db.commit()
            db.close()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            return False
    
    @staticmethod
    def get_user_translations(user_id, limit=100):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            db = sqlite3.connect(DATABASE)
            cursor = db.cursor()
            
            cursor.execute('''
                SELECT * FROM translations 
                WHERE user_id = ? 
                ORDER BY created_at DESC 
                LIMIT ?
            ''', (user_id, limit))
            
            translations = cursor.fetchall()
            db.close()
            
            result = []
            for trans in translations:
                result.append({
                    'id': trans[0],
                    'informal_text': trans[1],
                    'formal_text': trans[2],
                    'explanation': trans[3],
                    'user_id': trans[4],
                    'direction': trans[5],
                    'created_at': trans[6]
                })
            
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
    
    @staticmethod
    def get_stats():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            db = sqlite3.connect(DATABASE)
            cursor = db.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM translations")
            total_translations = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(DISTINCT user_id) FROM translations")
            unique_users = cursor.fetchone()[0]
            
            db.close()
            
            return {
                'total_translations': total_translations,
                'unique_users': unique_users
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total_translations': 0, 'unique_users': 0}

# –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å GigaChat –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class SimpleGigaChatService:
    def __init__(self):
        print("‚úÖ SimpleGigaChatService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
    
    def translate_text(self, text, direction):
        """–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ GigaChat"""
        if direction == "to_formal":
            translation = f"üìù –§–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {text}"
            explanation = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ. –í —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç GigaChat."
        else:
            translation = f"üí¨ –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {text}"
            explanation = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ. –í —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç GigaChat."
        
        return translation, explanation

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
try:
    gigachat = SimpleGigaChatService()
    gigachat_available = True
    print("‚úÖ GigaChatService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GigaChat: {e}")
    gigachat_available = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
db_initialized = init_database()

# API –ú–ê–†–®–†–£–¢–´ –° –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–´–ú CORS

@app.route('/api/health', methods=['GET', 'OPTIONS'])
@cross_origin()
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API –∏ –ë–î"""
    if request.method == 'OPTIONS':
        return jsonify({'status': 'ok'}), 200
        
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = get_db()
        if db:
            cursor = db.cursor()
            cursor.execute("SELECT COUNT(*) FROM translations")
            count = cursor.fetchone()[0]
            db.close()
            
            db_status = "connected"
            message = f"API –∏ –ë–î —Ä–∞–±–æ—Ç–∞—é—Ç. –ó–∞–ø–∏—Å–µ–π –≤ –ë–î: {count}"
        else:
            db_status = "disconnected"
            message = "–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    except Exception as e:
        db_status = "error"
        message = f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}"
    
    status = {
        "status": "ok" if db_status == "connected" else "error",
        "database": db_status,
        "gigachat": "connected" if gigachat_available else "disconnected",
        "message": message,
        "timestamp": datetime.now().isoformat()
    }
    return jsonify(status)

@app.route('/api/translate', methods=['POST', 'OPTIONS'])
@cross_origin()
def translate_text():
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
    if request.method == 'OPTIONS':
        return jsonify({'status': 'ok'}), 200
        
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        if not gigachat_available:
            return jsonify({
                "error": "–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "details": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            }), 503
        
        data = request.get_json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not data:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–ø—Ä–æ—Å–µ"}), 400
            
        if 'text' not in data:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä: text"}), 400
            
        if 'direction' not in data:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä: direction"}), 400
            
        if 'user_id' not in data:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä: user_id"}), 400
        
        text = data['text'].strip()
        direction = data['direction']
        user_id = data['user_id']
        
        if not text:
            return jsonify({"error": "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        if direction not in ['to_formal', 'to_informal']:
            return jsonify({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞. –î–æ–ø—É—Å—Ç–∏–º–æ: to_formal, to_informal"}), 400
        
        print(f"üîß –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞: '{text}' -> {direction} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        translation, explanation = gigachat.translate_text(text, direction)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if direction == 'to_formal':
            informal_text = text
            formal_text = translation
        else:
            informal_text = translation
            formal_text = text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        saved = DatabaseManager.add_translation(informal_text, formal_text, explanation, user_id, direction)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            "success": True,
            "original_text": text,
            "translated_text": translation,
            "explanation": explanation,
            "direction": direction,
            "timestamp": datetime.now().isoformat(),
            "saved_to_db": saved
        }
        
        print(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {text[:50]}... -> {translation[:50]}...")
        
        return jsonify(response)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ API –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return jsonify({
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}",
            "success": False
        }), 500

@app.route('/api/history/<user_id>', methods=['GET', 'OPTIONS'])
@cross_origin()
def get_user_history(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if request.method == 'OPTIONS':
        return jsonify({'status': 'ok'}), 200
        
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        limit = request.args.get('limit', default=100, type=int)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î
        translations = DatabaseManager.get_user_translations(user_id, limit)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        history = []
        for trans in translations:
            history.append({
                "id": trans['id'],
                "informal_text": trans['informal_text'],
                "formal_text": trans['formal_text'],
                "explanation": trans['explanation'],
                "direction": trans['direction'],
                "created_at": trans['created_at']
            })
        
        return jsonify({
            "success": True,
            "user_id": user_id,
            "translations": history,
            "total": len(history),
            "limit": limit
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return jsonify({
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}",
            "success": False
        }), 500

@app.route('/api/stats/<user_id>', methods=['GET', 'OPTIONS'])
@cross_origin()
def get_user_stats(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if request.method == 'OPTIONS':
        return jsonify({'status': 'ok'}), 200
        
    try:
        translations = DatabaseManager.get_user_translations(user_id, 1000)
        
        stats = {
            "total_translations": len(translations),
            "to_formal_count": len([t for t in translations if t.get('direction') == 'to_formal']),
            "to_informal_count": len([t for t in translations if t.get('direction') == 'to_informal']),
            "last_activity": translations[0]['created_at'] if translations else None
        }
        
        return jsonify({
            "success": True,
            "user_id": user_id,
            "stats": stats
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            "success": False
        }), 500

@app.route('/api/stats', methods=['GET', 'OPTIONS'])
@cross_origin()
def get_global_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if request.method == 'OPTIONS':
        return jsonify({'status': 'ok'}), 200
        
    try:
        stats = DatabaseManager.get_stats()
        
        return jsonify({
            "success": True,
            "stats": stats,
            "gigachat_status": "connected" if gigachat_available else "disconnected"
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            "success": False
        }), 500

@app.route('/api/test-db', methods=['GET', 'OPTIONS'])
@cross_origin()
def test_db():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î"""
    if request.method == 'OPTIONS':
        return jsonify({'status': 'ok'}), 200
        
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = get_db()
        if db:
            cursor = db.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='translations'")
            table_exists = cursor.fetchone()
            
            if table_exists:
                cursor.execute("SELECT COUNT(*) FROM translations")
                count = cursor.fetchone()[0]
                cursor.execute("SELECT COUNT(DISTINCT user_id) FROM translations")
                users_count = cursor.fetchone()[0]
                
                db.close()
                
                return jsonify({
                    "success": True,
                    "message": "–ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    "table_exists": True,
                    "records_count": count,
                    "unique_users": users_count
                })
            else:
                db.close()
                return jsonify({
                    "success": False,
                    "message": "–¢–∞–±–ª–∏—Ü–∞ translations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                    "table_exists": False
                })
        else:
            return jsonify({
                "success": False,
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î"
            }), 503
            
    except Exception as e:
        return jsonify({
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ë–î: {str(e)}"
        }), 500

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/api/test-cors', methods=['GET', 'OPTIONS'])
@cross_origin()
def test_cors():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS"""
    if request.method == 'OPTIONS':
        return jsonify({'status': 'preflight'}), 200
        
    return jsonify({
        "success": True,
        "message": "CORS —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        "timestamp": datetime.now().isoformat(),
        "cors_headers": {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET,POST,OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type,Authorization"
        }
    })

@app.route('/api/echo', methods=['POST', 'OPTIONS'])
@cross_origin()
def echo():
    """–≠—Ö–æ-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if request.method == 'OPTIONS':
        return jsonify({'status': 'ok'}), 200
        
    data = request.get_json() or {}
    return jsonify({
        "success": True,
        "echo": data,
        "timestamp": datetime.now().isoformat(),
        "headers": dict(request.headers)
    })

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({
        "success": False,
        "error": "–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "path": request.path
    }), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({
        "success": False,
        "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
    }), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º CORS...")
    print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("   GET  /api/health          - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API")
    print("   POST /api/translate       - –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")
    print("   GET  /api/history/<id>    - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("   GET  /api/stats/<id>      - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("   GET  /api/stats           - –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("   GET  /api/test-db         - —Ç–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("   GET  /api/test-cors       - —Ç–µ—Å—Ç CORS")
    print("   POST /api/echo            - —ç—Ö–æ-—Ç–µ—Å—Ç")
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print("   –ü–æ—Ä—Ç: 5000")
    print("   –•–æ—Å—Ç: 0.0.0.0 (–≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã)")
    print("   CORS: —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤—Å–µ –¥–æ–º–µ–Ω—ã")
    print("   –†–µ–∂–∏–º: —Ç–µ—Å—Ç–æ–≤—ã–π (SimpleGigaChatService)")
    print("‚ö° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.run(
        host='0.0.0.0', 
        port=5000, 
        debug=False, 
        threaded=True
    )