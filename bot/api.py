from flask import Flask, request, jsonify, send_file
import sqlite3
from datetime import datetime
import os

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE = 'translations.db'

# ========== –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ ==========

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ—Ç–¥–∞–µ–º site.html"""
    return send_file('site.html')

@app.route('/style.css')
def serve_css():
    """–û—Ç–¥–∞–µ–º CSS —Ñ–∞–π–ª"""
    return send_file('style.css')

@app.route('/script.js')
def serve_js():
    """–û—Ç–¥–∞–µ–º JavaScript —Ñ–∞–π–ª"""
    return send_file('script.js')

# ========== API –ú–ê–†–®–†–£–¢–´ ==========

def get_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db = sqlite3.connect(DATABASE)
        db.row_factory = sqlite3.Row
        return db
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db = sqlite3.connect(DATABASE)
        cursor = db.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS translations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                informal_text TEXT NOT NULL,
                formal_text TEXT NOT NULL,
                explanation TEXT,
                user_id TEXT NOT NULL,
                direction TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE INDEX IF NOT EXISTS idx_user_id ON translations(user_id)
        ''')
        
        db.commit()
        db.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

class DatabaseManager:
    @staticmethod
    def add_translation(informal_text, formal_text, explanation, user_id, direction):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ë–î"""
        try:
            db = sqlite3.connect(DATABASE)
            cursor = db.cursor()
            
            cursor.execute('''
                INSERT INTO translations (informal_text, formal_text, explanation, user_id, direction, created_at)
                VALUES (?, ?, ?, ?, ?, datetime('now'))
            ''', (informal_text, formal_text, explanation, user_id, direction))
            
            db.commit()
            db.close()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            return False
    
    @staticmethod
    def get_user_translations(user_id, limit=100):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            db = sqlite3.connect(DATABASE)
            cursor = db.cursor()
            
            cursor.execute('''
                SELECT * FROM translations 
                WHERE user_id = ? 
                ORDER BY created_at DESC 
                LIMIT ?
            ''', (user_id, limit))
            
            translations = cursor.fetchall()
            db.close()
            
            result = []
            for trans in translations:
                result.append({
                    'id': trans[0],
                    'informal_text': trans[1],
                    'formal_text': trans[2],
                    'explanation': trans[3],
                    'user_id': trans[4],
                    'direction': trans[5],
                    'created_at': trans[6]
                })
            
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []

# –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å GigaChat –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class SimpleGigaChatService:
    def __init__(self):
        print("‚úÖ SimpleGigaChatService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
    
    def translate_text(self, text, direction):
        """–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥"""
        if direction == "to_formal":
            translation = f"üìù –§–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {text}"
            explanation = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ. –í —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç GigaChat."
        else:
            translation = f"üí¨ –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {text}"
            explanation = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ. –í —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç GigaChat."
        
        return translation, explanation

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
try:
    gigachat = SimpleGigaChatService()
    gigachat_available = True
    print("‚úÖ GigaChatService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GigaChat: {e}")
    gigachat_available = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
db_initialized = init_database()

# ========== API –≠–ù–î–ü–û–ò–ù–¢–´ ==========

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API –∏ –ë–î"""
    try:
        db = get_db()
        if db:
            cursor = db.cursor()
            cursor.execute("SELECT COUNT(*) FROM translations")
            count = cursor.fetchone()[0]
            db.close()
            
            db_status = "connected"
            message = f"API –∏ –ë–î —Ä–∞–±–æ—Ç–∞—é—Ç. –ó–∞–ø–∏—Å–µ–π –≤ –ë–î: {count}"
        else:
            db_status = "disconnected"
            message = "–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    except Exception as e:
        db_status = "error"
        message = f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}"
    
    status = {
        "status": "ok" if db_status == "connected" else "error",
        "database": db_status,
        "gigachat": "connected" if gigachat_available else "disconnected",
        "message": message,
        "timestamp": datetime.now().isoformat()
    }
    return jsonify(status)

@app.route('/api/translate', methods=['POST'])
def translate_text():
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
    try:
        if not gigachat_available:
            return jsonify({
                "error": "–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "details": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            }), 503
        
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–ø—Ä–æ—Å–µ"}), 400
            
        if 'text' not in data:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä: text"}), 400
            
        if 'direction' not in data:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä: direction"}), 400
            
        if 'user_id' not in data:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä: user_id"}), 400
        
        text = data['text'].strip()
        direction = data['direction']
        user_id = data['user_id']
        
        if not text:
            return jsonify({"error": "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        if direction not in ['to_formal', 'to_informal']:
            return jsonify({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞. –î–æ–ø—É—Å—Ç–∏–º–æ: to_formal, to_informal"}), 400
        
        print(f"üîß –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞: '{text}' -> {direction} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        translation, explanation = gigachat.translate_text(text, direction)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if direction == 'to_formal':
            informal_text = text
            formal_text = translation
        else:
            informal_text = translation
            formal_text = text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        saved = DatabaseManager.add_translation(informal_text, formal_text, explanation, user_id, direction)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            "success": True,
            "original_text": text,
            "translated_text": translation,
            "explanation": explanation,
            "direction": direction,
            "timestamp": datetime.now().isoformat(),
            "saved_to_db": saved
        }
        
        print(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {text[:50]}... -> {translation[:50]}...")
        
        return jsonify(response)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ API –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return jsonify({
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}",
            "success": False
        }), 500

@app.route('/api/history/<user_id>', methods=['GET'])
def get_user_history(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        limit = request.args.get('limit', default=100, type=int)
        
        translations = DatabaseManager.get_user_translations(user_id, limit)
        
        history = []
        for trans in translations:
            history.append({
                "id": trans['id'],
                "informal_text": trans['informal_text'],
                "formal_text": trans['formal_text'],
                "explanation": trans['explanation'],
                "direction": trans['direction'],
                "created_at": trans['created_at']
            })
        
        return jsonify({
            "success": True,
            "user_id": user_id,
            "translations": history,
            "total": len(history),
            "limit": limit
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return jsonify({
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}",
            "success": False
        }), 500

@app.route('/api/stats/<user_id>', methods=['GET'])
def get_user_stats(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        translations = DatabaseManager.get_user_translations(user_id, 1000)
        
        stats = {
            "total_translations": len(translations),
            "to_formal_count": len([t for t in translations if t.get('direction') == 'to_formal']),
            "to_informal_count": len([t for t in translations if t.get('direction') == 'to_informal']),
            "last_activity": translations[0]['created_at'] if translations else None
        }
        
        return jsonify({
            "success": True,
            "user_id": user_id,
            "stats": stats
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            "success": False
        }), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Slanglit (–°–∞–π—Ç + API)")
    print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:")
    print("   GET  /                    - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∞–π—Ç–∞")
    print("   GET  /api/health          - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API")
    print("   POST /api/translate       - –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")
    print("   GET  /api/history/<id>    - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("   GET  /api/stats/<id>      - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("üîß –ü–æ—Ä—Ç: 5000")
    print("‚ö° CORS –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã - —Å–∞–π—Ç –∏ API –Ω–∞ –æ–¥–Ω–æ–º –¥–æ–º–µ–Ω–µ!")
    
    app.run(host='0.0.0.0', port=5000, debug=False)